// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: monibuca.proto

package monibuca

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Monibuca service

type MonibucaService interface {
	Play(ctx context.Context, in *PlayRequest, opts ...client.CallOption) (*PlayResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error)
	Pull(ctx context.Context, in *PullRequest, opts ...client.CallOption) (*PullResponse, error)
}

type monibucaService struct {
	c    client.Client
	name string
}

func NewMonibucaService(name string, c client.Client) MonibucaService {
	return &monibucaService{
		c:    c,
		name: name,
	}
}

func (c *monibucaService) Play(ctx context.Context, in *PlayRequest, opts ...client.CallOption) (*PlayResponse, error) {
	req := c.c.NewRequest(c.name, "Monibuca.Play", in)
	out := new(PlayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monibucaService) Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error) {
	req := c.c.NewRequest(c.name, "Monibuca.Stop", in)
	out := new(StopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monibucaService) Pull(ctx context.Context, in *PullRequest, opts ...client.CallOption) (*PullResponse, error) {
	req := c.c.NewRequest(c.name, "Monibuca.Pull", in)
	out := new(PullResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Monibuca service

type MonibucaHandler interface {
	Play(context.Context, *PlayRequest, *PlayResponse) error
	Stop(context.Context, *StopRequest, *StopResponse) error
	Pull(context.Context, *PullRequest, *PullResponse) error
}

func RegisterMonibucaHandler(s server.Server, hdlr MonibucaHandler, opts ...server.HandlerOption) error {
	type monibuca interface {
		Play(ctx context.Context, in *PlayRequest, out *PlayResponse) error
		Stop(ctx context.Context, in *StopRequest, out *StopResponse) error
		Pull(ctx context.Context, in *PullRequest, out *PullResponse) error
	}
	type Monibuca struct {
		monibuca
	}
	h := &monibucaHandler{hdlr}
	return s.Handle(s.NewHandler(&Monibuca{h}, opts...))
}

type monibucaHandler struct {
	MonibucaHandler
}

func (h *monibucaHandler) Play(ctx context.Context, in *PlayRequest, out *PlayResponse) error {
	return h.MonibucaHandler.Play(ctx, in, out)
}

func (h *monibucaHandler) Stop(ctx context.Context, in *StopRequest, out *StopResponse) error {
	return h.MonibucaHandler.Stop(ctx, in, out)
}

func (h *monibucaHandler) Pull(ctx context.Context, in *PullRequest, out *PullResponse) error {
	return h.MonibucaHandler.Pull(ctx, in, out)
}
